import { type NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import Timer from "@/components/Timer";
import NavBar from "@/components/NavBar";
import Control from "@/components/Control";
import Stats from "@/components/Stats";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, db } from "@/lib/firebase";
import { doc, getDoc } from "firebase/firestore";

const Home: NextPage = () => {
    const [minutes, setMinutes] = useState(25);
    const [isStarted, setIsStarted] = useState(false);
    const [isPaused, setIsPaused] = useState(false);
    const [isReset, setIsReset] = useState(false);
    const [isBreak, setIsBreak] = useState(false);
    const [startedAt, setStartedAt] = useState(Date.now());
    const [breakTime, setBreakTime] = useState(5);
    const [hours, setHours] = useState(0);
    const [sessions, setSessions] = useState(0);
    const [timeLeft, setTimeLeft] = useState(minutes * 60);

    const [user] = useAuthState(auth);

    useEffect(() => {
        if (user) {
            getData();
            getTime();
        }
    }, [user]);

    useEffect(() => {
        setTimeLeft(minutes * 60);
    }, [minutes]);

    const getData = async () => {

        const now = new Date();
        const dateStr = `${now.getMonth() + 1}-${now.getDate()}-${now.getFullYear()}`;
        const docRef = doc(db, "users", user!.uid, "hours", dateStr);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
            setHours(docSnap.data()!.hours.toFixed(2))
            setSessions(docSnap.data()!.sessions);
        } else {
            setHours(0);
            setSessions(0);
        }
    }

    const getTime = async () => {
        const docRef = doc(db, "users", user!.uid);
        const docSnap = await getDoc(docRef);
        if(docSnap.exists()) {
            setMinutes(docSnap.data()!.workTime);
            setBreakTime(docSnap.data()!.breakTime);
        }
    }

    return (
        <>
            <Head>

                 {isStarted ? <title>{Math.floor(timeLeft / 60)}:{timeLeft % 60}</title> : <title>Potato Timer</title>}
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="max-h-[100vh]">
                <NavBar />
                <div className="flex flex-col items-center w-full mt-auto h-[70vh] justify-center gap-5 ">
                    <Timer
                        startedAt={startedAt}
                        setStartedAt={setStartedAt}
                        minutes={minutes}
                        isStarted={isStarted}
                        setIsStarted={setIsStarted}
                        isPaused={isPaused}
                        setIsPaused={setIsPaused}
                        isReset={isReset}
                        setIsReset={setIsReset}
                        breakTime={breakTime}
                        setBreakTime={setBreakTime}
                        setIsBreak={setIsBreak}
                        isBreak={isBreak}
                        hours={hours}
                        setHours={setHours}
                        timeLeft={timeLeft}
                        setTimeLeft={setTimeLeft}
                    />
                    <Control
                        startedAt={startedAt}
                        setStartedAt={setStartedAt}
                        isStarted={isStarted}
                        setIsStarted={setIsStarted}
                        isPaused={isPaused}
                        setIsPaused={setIsPaused}
                        isReset={isReset}
                        setIsReset={setIsReset}
                        timeLeft={timeLeft}
                        setTimeLeft={setTimeLeft}
                        minutes={minutes}
                       isBreak={isBreak}
                      breakTime={breakTime}
                    />
                    <Stats hours={hours} sessions={sessions} />
                </div>
            </main>
        </>
    );
};

export default Home;
